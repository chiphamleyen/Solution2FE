import React, { useState, useEffect } from 'react';
import { Card } from 'react-bootstrap';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';
import { COLORS } from './ChartColors';
import { format, subDays, addDays } from 'date-fns';
import axiosUser from '../../../api/axiosUser';
import { API_PATHS_USER } from '../../../api/config';

const MalwareVsBenignChart = () => {
  const [chartData, setChartData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDailyData = async () => {
      try {
        // Create array of dates for last 7 days
        const dateRanges = Array.from({ length: 7 }, (_, i) => {
          const targetDate = subDays(new Date(), i);
          const yesterday = format(subDays(targetDate, 1), 'yyyy-MM-dd');
          const today = format(targetDate, 'yyyy-MM-dd');
          // Adjust the max date to include full day data
          const adjustedToday = format(addDays(targetDate, 1), 'yyyy-MM-dd');
          return {
            date: format(targetDate, 'MMM dd'),
            dateRange: { yesterday, today, adjustedToday }
          };
        }).reverse(); // Reverse to get chronological order

        // Create array of promises for all API calls
        const apiPromises = dateRanges.map(({ dateRange }) => 
          axiosUser.get(
            `${API_PATHS_USER.REPORT.split('?')[0]}?min_date=${dateRange.yesterday}&max_date=${dateRange.adjustedToday}`
          )
        );

        // Execute all API calls in parallel
        const responses = await Promise.all(apiPromises);

        // Process all responses
        const processedData = responses.map((response, index) => {
          const dayData = response.data.data;
          
          // Calculate malware total (sum of all non-Benign traffic)
          const malwareTotal = dayData.classifier
            .filter(item => item.type !== "Benign")
            .reduce((sum, item) => sum + item.total, 0);

          // Get benign traffic count
          const benignCount = dayData.classifier
            .find(item => item.type === "Benign")?.total || 0;

          return {
            date: dateRanges[index].date,
            Malware: malwareTotal,
            Benign: benignCount
          };
        });

        setChartData(processedData);
        setError(null);
      } catch (error) {
        console.error("Error fetching daily data:", error);
        setError("Failed to load traffic data");
      } finally {
        setLoading(false);
      }
    };

    fetchDailyData();
  }, []);

  if (loading) {
    return (
      <Card className="border-0 shadow-sm">
        <Card.Body className="d-flex justify-content-center align-items-center" style={{ height: "470px" }}>
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </Card.Body>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="border-0 shadow-sm">
        <Card.Body className="d-flex justify-content-center align-items-center" style={{ height: "470px" }}>
          <div className="text-danger">{error}</div>
        </Card.Body>
      </Card>
    );
  }

  return (
    <Card className="border-0 shadow-sm">
      <Card.Body>
        <h5 className="card-title mb-4" style={{ color: "#475569" }}>Weekly Traffic Distribution</h5>
        <ResponsiveContainer width="100%" height={470}>
          <BarChart
            data={chartData}
            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
            <XAxis 
              dataKey="date" 
              tick={{ fill: '#64748b' }}
              axisLine={{ stroke: '#cbd5e1' }}
            />
            <YAxis 
              tick={{ fill: '#64748b' }}
              axisLine={{ stroke: '#cbd5e1' }}
            />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: '#ffffff',
                border: '1px solid #e2e8f0',
                borderRadius: '6px'
              }}
            />
            <Legend />
            <Bar 
              dataKey="Malware" 
              fill={COLORS.malware}
              radius={[4, 4, 0, 0]}
            />
            <Bar 
              dataKey="Benign" 
              fill={COLORS.benign}
              radius={[4, 4, 0, 0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
};

export default MalwareVsBenignChart; 